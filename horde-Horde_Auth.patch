--- ./lib/Auth/ftp.php.org	Fri Apr  5 03:24:25 2002
+++ ./lib/Auth/ftp.php	Sun Aug 18 18:14:00 2002
@@ -2,10 +2,10 @@
 // $Horde: horde/lib/Auth/ftp.php,v 1.4.2.3 2002/04/05 01:24:25 jon Exp $
 
 Horde::functionCheck('ftp_connect', true,
-    'Auth_ftp: Required FTP functions were not found.');
+    'Horde_Auth_ftp: Required FTP functions were not found.');
 
 /**
- * The Auth_ftp class provides an FTP implementation of the Horde
+ * The Horde_Auth_ftp class provides an FTP implementation of the Horde
  * authentication system.
  *
  * @author  Chuck Hagenbuch <chuck@horde.org>
@@ -14,7 +14,7 @@
  * @since   Horde 1.3
  * @package horde.auth
  */
-class Auth_ftp extends Auth {
+class Horde_Auth_ftp extends Horde_Auth {
 
     /**
      * Hash containing connection parameters.
@@ -60,7 +60,7 @@
      */
     function authenticate($userID, $credentials)
     {
-        if (Auth::checkAuth($userID)) {
+        if (Horde_Auth::checkAuth($userID)) {
             return true;
         }
 
@@ -68,7 +68,7 @@
 
         if ($ftp && @ftp_login($ftp, $userID, $credentials['password'])) {
             @ftp_quit($ftp);
-            Auth::setAuth($userID, $credentials);
+            Horde_Auth::setAuth($userID, $credentials);
             return true;
         }
 
--- ./lib/Auth/imap.php.org	Fri Apr  5 03:24:25 2002
+++ ./lib/Auth/imap.php	Sun Aug 18 18:15:02 2002
@@ -2,10 +2,10 @@
 // $Horde: horde/lib/Auth/imap.php,v 1.4.2.3 2002/04/05 01:24:25 jon Exp $
 
 Horde::functionCheck('imap_open', true,
-    'Auth_imap: Required IMAP functions were not found.');
+    'Horde_Auth_imap: Required IMAP functions were not found.');
 
 /**
- * The Auth_imap class provides an IMAP implementation of the Horde
+ * The Horde_Auth_imap class provides an IMAP implementation of the Horde
  * authentication system.
  *
  * Parameters:
@@ -20,7 +20,7 @@
  * @since   Horde 1.3
  * @package horde.auth
  */
-class Auth_imap extends Auth {
+class Horde_Auth_imap extends Horde_Auth {
 
     /**
      * Hash containing connection parameters.
@@ -82,7 +82,7 @@
      */
     function authenticate($userID, $credentials)
     {
-        if (Auth::checkAuth($userID)) {
+        if (Horde_Auth::checkAuth($userID)) {
             return true;
         }
 
@@ -91,7 +91,7 @@
 
         if ($imap) {
             @imap_close($imap);
-            Auth::setAuth($userID, $credentials);
+            Horde_Auth::setAuth($userID, $credentials);
             return true;
         }
 
--- ./lib/Auth/ldap.php.org	Tue May 21 01:28:16 2002
+++ ./lib/Auth/ldap.php	Sun Aug 18 18:17:03 2002
@@ -2,10 +2,10 @@
 // $Horde: horde/lib/Auth/ldap.php,v 1.5.2.4 2002/05/20 23:28:16 chuck Exp $
 
 Horde::functionCheck('ldap_connect', true,
-    'Auth_ldap: Required LDAP functions were not found.');
+    'Horde_Auth_ldap: Required LDAP functions were not found.');
 
 /**
- * The Auth_ldap class provides an LDAP implementation of the Horde
+ * The Horde_Auth_ldap class provides an LDAP implementation of the Horde
  * authentication system.
  *
  * Required values for $params:
@@ -18,7 +18,7 @@
  * @since   Horde 1.3
  * @package horde.auth
  */
-class Auth_ldap extends Auth {
+class Horde_Auth_ldap extends Horde_Auth {
 
     /** An array of capabilities, so that the driver can report which
         operations it supports and which it doesn't.
@@ -72,7 +72,7 @@
      */
     function authenticate($userID, $credentials)
     {
-        if (Auth::checkAuth($userID)) {
+        if (Horde_Auth::checkAuth($userID)) {
             return true;
         }
 
@@ -110,7 +110,7 @@
         $bind = @ldap_bind($ldap, $dn, $credentials['password']);
         if ($bind != false) {
             @ldap_close($ldap);
-            Auth::setAuth($userID, $credentials);
+            Horde_Auth::setAuth($userID, $credentials);
             return true;
         }
 
--- ./lib/Auth/mcal.php.org	Fri Apr  5 03:24:26 2002
+++ ./lib/Auth/mcal.php	Sun Aug 18 18:18:37 2002
@@ -1,10 +1,10 @@
 <?php
 // $Horde: horde/lib/Auth/mcal.php,v 1.4.2.3 2002/04/05 01:24:26 jon Exp $
 
-Horde::functionCheck('mcal_open', true, 'Auth_mcal: Required MCAL functions were not found.');
+Horde::functionCheck('mcal_open', true, 'Horde_Auth_mcal: Required MCAL functions were not found.');
 
 /**
- * The Auth_mcal class provides an MCAL implementation of the Horde
+ * The Horde_Auth_mcal class provides an MCAL implementation of the Horde
  * authentication system.
  *
  * @author  Chuck Hagenbuch <chuck@horde.org>
@@ -12,7 +12,7 @@
  * @since   Horde 1.3
  * @package horde.auth
  */
-class Auth_mcal extends Auth {
+class Horde_Auth_mcal extends Horde_Auth {
 
     /** An array of capabilities, so that the driver can report which
         operations it supports and which it doesn't.
@@ -52,7 +52,7 @@
      */
     function authenticate($userID, $credentials)
     {
-        if (Auth::checkAuth($userID)) {
+        if (Horde_Auth::checkAuth($userID)) {
             return true;
         }
 
@@ -60,7 +60,7 @@
 
         if ($mcal) {
             @mcal_close($mcal);
-            Auth::setAuth($userID, $credentials);
+            Horde_Auth::setAuth($userID, $credentials);
             return true;
         }
 
--- ./lib/Auth/sql.php.org	Fri Apr  5 03:24:26 2002
+++ ./lib/Auth/sql.php	Sun Aug 18 18:19:36 2002
@@ -2,7 +2,7 @@
 // $Horde: horde/lib/Auth/sql.php,v 1.21.2.3 2002/04/05 01:24:26 jon Exp $
 
 /**
- * The Auth_sql class provides a sql implementation of the Horde
+ * The Horde_Auth_sql class provides a sql implementation of the Horde
  * authentication system.
  *
  * Required values for $params:
@@ -32,7 +32,7 @@
  * @since   Horde 1.3
  * @package horde.auth
  */
-class Auth_sql extends Auth {
+class Horde_Auth_sql extends Horde_Auth {
 
     /** An array of capabilities, so that the driver can report which
         operations it supports and which it doesn't.
@@ -145,7 +145,7 @@
      */
     function authenticate($userID, $credentials)
     {
-        if (Auth::checkAuth($userID)) {
+        if (Horde_Auth::checkAuth($userID)) {
             return true;
         }
 
@@ -164,7 +164,7 @@
             $row = $result->fetchRow(DB_GETMODE_ASSOC);
             if (is_array($row)) {
                 $result->free();
-                Auth::setAuth($userID, $credentials);
+                Horde_Auth::setAuth($userID, $credentials);
                 return true;
             } else {
                 $result->free();
--- ./lib/Category/sql.php.org	Fri Apr  5 03:24:27 2002
+++ ./lib/Category/sql.php	Sun Aug 18 18:11:57 2002
@@ -222,7 +222,7 @@
                          ' VALUES (%s, %s, %s, %s, %s, %s)',
                          $this->params['table'], $id, $this->db->quote($this->params['group']),
                          $this->db->quote($name), $this->db->quote($data),
-                         $this->db->quote(Auth::getAuth()), $ser);
+                         $this->db->quote(Horde_Auth::getAuth()), $ser);
 
         /* Execute the query. */
         $result = $this->db->query($query);
--- ./lib/Auth.php.org	Fri Apr  5 03:24:18 2002
+++ ./lib/Auth.php	Sun Aug 18 18:10:55 2002
@@ -4,15 +4,15 @@
 require_once dirname(__FILE__) . '/Secret.php';
 
 /**
- * The Auth:: class provides a common abstracted interface into the
- * various backends for the Horde authentication system.
+ * The Horde_Auth:: class provides a common abstracted interface into
+ * the various backends for the Horde authentication system.
  *
  * @author  Chuck Hagenbuch <chuck@horde.org>
  * @version $Revision$
  * @since   Horde 1.3
  * @package horde.auth
  */
-class Auth {
+class Horde_Auth {
 
     /** An array of capabilities, so that the driver can report which
         operations it supports and which it doesn't.
@@ -42,7 +42,7 @@
         $driver = strtolower(basename($driver));
 
         if (empty($driver) || (strcmp($driver, 'none') == 0)) {
-            return new Auth;
+            return new Horde_Auth;
         }
 
         @include_once dirname(__FILE__) . '/Auth/' . $driver . '.php';
@@ -82,7 +82,7 @@
 
         $signature = md5(strtolower($driver) . '][' . @implode('][', $params));
         if (!isset($instances[$signature])) {
-            $instances[$signature] = &Auth::factory($driver, $params);
+            $instances[$signature] = &Horde_Auth::factory($driver, $params);
         }
 
         return $instances[$signature];
@@ -98,7 +98,7 @@
      */
     function authenticate($userID, $credentials)
     {
-        return Auth::checkAuth($userID);
+        return Horde_Auth::checkAuth($userID);
     }
 
     /**
--- ./lib/Registry.php.org	Sun Apr 14 18:38:40 2002
+++ ./lib/Registry.php	Sun Aug 18 18:37:43 2002
@@ -571,7 +571,7 @@
 
         /* Don't load an actual prefs driver or cache guest
          * preferences. */
-        if (!Auth::getAuth()) {
+        if (!Horde_Auth::getAuth()) {
             $prefs = &Prefs::factory('none', $app, '', '', array());
             $prefs->setDefaults($this->getParam('fileroot', 'horde') . '/config/prefs.php');
             $prefs->setDefaults($this->getParam('fileroot') . '/config/prefs.php');
@@ -585,7 +585,7 @@
         if (!isset($this->prefsCache[$app])) {
             global $conf;
             $prefs = &Prefs::factory($conf['prefs']['driver'], $app,
-                                     Auth::getAuth(), Auth::getCredential('password'),
+                                     Horde_Auth::getAuth(), Horde_Auth::getCredential('password'),
                                      $conf['prefs']['params']);
             $prefs->setDefaults($this->getParam('fileroot', 'horde') . '/config/prefs.php');
             $prefs->setDefaults($this->getParam('fileroot') . '/config/prefs.php');
--- ./templates/wml/login/user.inc.org	Thu Mar 29 17:47:49 2001
+++ ./templates/wml/login/user.inc	Sun Aug 18 18:21:32 2002
@@ -1 +1 @@
-<p><?= sprintf(_("Welcome, %s"), ucfirst(Auth::getAuth())) ?></p>
+<p><?= sprintf(_("Welcome, %s"), ucfirst(Horde_Auth::getAuth())) ?></p>
--- ./login.php.org	Sat Jun  8 06:15:55 2002
+++ ./login.php	Sun Aug 18 18:23:18 2002
@@ -19,9 +19,9 @@
         exit;
     } else {
         $entry = sprintf('User %s [%s] logged out of Horde',
-                         Auth::getAuth(), $HTTP_SERVER_VARS['REMOTE_ADDR']);
+                         Horde_Auth::getAuth(), $HTTP_SERVER_VARS['REMOTE_ADDR']);
         Horde::logMessage($entry, __FILE__, __LINE__, LOG_NOTICE);
-        Auth::clearAuth();
+        Horde_Auth::clearAuth();
         session_destroy();
         @session_start();
     }
@@ -29,11 +29,11 @@
 
 if (isset($HTTP_POST_VARS['horde_user']) &&
     isset($HTTP_POST_VARS['horde_pass'])) {
-    $auth = &Auth::singleton($conf['auth']['driver'], $conf['auth']['params']);
+    $auth = &Horde_Auth::singleton($conf['auth']['driver'], $conf['auth']['params']);
     if ($auth->authenticate(Horde::getFormData('horde_user'),
                             array('password' => Horde::getFormData('horde_pass')))) {
         $entry = sprintf('Login success for %s [%s] to Horde',
-                         Auth::getAuth(), $HTTP_SERVER_VARS['REMOTE_ADDR']);
+                         Horde_Auth::getAuth(), $HTTP_SERVER_VARS['REMOTE_ADDR']);
         $level = LOG_INFO;
     } else {
         $entry = sprintf('FAILED LOGIN for %s [%s] to Horde',
@@ -43,7 +43,7 @@
     Horde::logMessage($entry, __FILE__, __LINE__, $level);
 }
 
-if (Auth::getAuth()) {
+if (Horde_Auth::getAuth()) {
     if (Horde::getFormData('url')) {
         header('Location: ' . Horde::url(Horde::getFormData('url'), true));
         exit;
@@ -60,7 +60,7 @@
                  'logout'  => _("You have been logged out.<br />Thank you for using the system."),
                  'failed'  => _("Login failed for some reason. Most likely your username or password was entered incorrectly."));
 
-if (Auth::getAuth()) {
+if (Horde_Auth::getAuth()) {
     $title = _("My Summary");
     $js_onLoad = null;
     if ($prefs->getValue('summary_refresh_time')) {
@@ -68,7 +68,7 @@
         $refresh_url = Horde::applicationUrl('login.php');
     }
     include_once HORDE_BASE . '/lib/Menu.php';
-    $fullname = Auth::getAuth();
+    $fullname = Horde_Auth::getAuth();
     $template = 'user.inc';
     $columns = array();
     foreach ($registry->applications as $app => $info) {
--- ./maintenance.php.org	Sun Apr 14 17:23:50 2002
+++ ./maintenance.php	Sun Aug 18 18:23:56 2002
@@ -14,7 +14,7 @@
 include_once HORDE_BASE . '/lib/Maintenance.php';
 
 /* Make sure there is a user logged in. */
-if (!Auth::getAuth()) {
+if (!Horde_Auth::getAuth()) {
     header('Location: ' . Horde::url($registry->getParam('webroot', 'horde') . '/login.php?url=' . urlencode(Horde::selfUrl()), true));
     echo "\n";
     exit;
--- ./prefs.php.org	Thu Apr 18 00:58:26 2002
+++ ./prefs.php	Sun Aug 18 18:24:27 2002
@@ -23,7 +23,7 @@
 require_once HORDE_BASE . '/lib/PrefsUI.php';
 require HORDE_BASE . '/config/prefs.php';
 
-if (!Auth::getAuth()) {
+if (!Horde_Auth::getAuth()) {
     header('Location: ' . Horde::applicationUrl('login.php'), true);
     exit;
 }
--- ./problem.php.org	Sun Apr 14 17:29:54 2002
+++ ./problem.php	Sun Aug 18 18:24:56 2002
@@ -20,7 +20,7 @@
 require_once HORDE_BASE . '/lib/Identity.php';
 require_once HORDE_BASE . '/lib/version.php';
 
-if (!Auth::getAuth()) {
+if (!Horde_Auth::getAuth()) {
     returnToPage();
 }
 
